#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 22 16:48:11 2021

@author: macproizzy
"""

from pynwb import NWBHDF5IO
import matplotlib.pylab as plt
import numpy as np
import pandas as pd
import seaborn as sns
import warnings
warnings.simplefilter('ignore')


def get_trials_df(file_path):
    """
    Returns the trials table from the nwb file as a pandas dataframe 

    Parameters
    ----------
    file_path : STRING
        location of the nwbfile on machine.
    electrical_series_name : STRING
        name of electrical series within NWB, should be "Poly" or "ECoG".

    Returns
    -------
    Trials table as a pandas dataframe.

    """
    io = NWBHDF5IO(file_path, 'r')
    nwbfile_in = io.read()
    trials_pds = nwbfile_in.intervals['trials'].to_dataframe()
    io.close()
    return trials_pds

def one_trial_details(trials_table):
    """
    Returns a list with the [length of one trial, stimulus start, stimulus stop] derived from the trials table
    This list is used in order to get the trials for single unit analysis

    Parameters
    ----------
    trials_table : Pandas Dataframe
        trials table contains columns start_time, stop_time, sb, frq, amp.

    Returns
    -------
    list with details for a trial

    """
    stop_times = np.array(trials_table.query("sb == 's'")['stop_time'])
    inter_stimulus_interval = np.diff(stop_times)
    min_isi = min(inter_stimulus_interval)
    
    stimulus_start = (trials_table[['start_time', 'stop_time']] - trials_table['stop_time'][0])['start_time'][1]
    stimulus_stop = (trials_table[['start_time', 'stop_time']] - trials_table['stop_time'][0])['stop_time'][1]
    
    len_stimulus = abs(stimulus_stop - stimulus_start)
    
    length_trial = min_isi + len_stimulus
    true_start = int(length_trial/2) - int(len_stimulus/2)
    true_stop = true_start + len_stimulus
    
    num_trials = int(trials_table.shape[0]/2)
    
    return length_trial, true_start, true_stop, num_trials, len_stimulus



def get_trials_to_plot(sorting_extractor, unit_id, trials_table):
    """
    Divides the spike times into trials according to the trial parameters in the trials table

    Parameters
    ----------
    sorting_extractor : Spikeinterface SortingExtractor Object
        the sorting extractor with single units to be analyzed.
    unit_id : int
        the single unit in question.
    trials_table : Pandas DataFrame 
        trials table contains columns start_time, stop_time, sb, frq, amp.

    Returns
    -------
    list with lists with the spike times for a unit in ms 

    """
    length_trial, stimulus_start, stimulus_stop, num_trials, length_stimulus = one_trial_details(trials_table)
    baseline = length_trial/2 - length_stimulus/2
    sampling_freq = sorting_extractor.get_sampling_frequency()
    
    spike_times_for_unit = sorting_extractor.get_unit_spike_train(unit_id)/sampling_freq #this is in seconds
    trials_info = []
    
    just_stimulus = trials_table[trials_table['sb']== 's']
    start_times_stimulus = np.array(just_stimulus['start_time'])
    stop_times_stimulus = np.array(just_stimulus['stop_time'])
    
    i = 0
    while i <= (len(stop_times_stimulus)) - 1:
        trial_start = start_times_stimulus[i] - baseline
        trial_stop = stop_times_stimulus[i] + baseline
    
        one_trial = []
        for spikes in spike_times_for_unit:
            if trial_start <= spikes < trial_stop:
                one_trial.append(spikes - trial_start)
        trials_info.append(one_trial)
        i += 1

    return trials_info

def get_all_trial_info(trials_data):
    """
    Takes the data back out of the trials info, which is a list of lists, and returns it as a sorted list with all of the spike
    times adjusted for trials

    Parameters
    ----------
    trials_data : list of lists
        this is the trials info generated by get_trials_to_plot.

    Returns
    -------
    all_trials : list
        the trials data in one big, sorted list.

    """
    all_trials = []
    for i in np.arange(len(trials_data)):
        all_trials.extend(trials_data[i])
    all_trials.sort()
    return all_trials

def per_trial_raster_plot(trials_info, unit_id, trials_table):
    """
    Creates a raster plot with the spike times for one unit 

    Parameters
    ----------
    trials_info : np array or list
        array with lists of spike times for each trial
    unit_id : int
        the unit id of interest.
    trials_table : pd DataFrame
        the pandas dataframe with the trials information.

    Returns
    -------
    raster plot.

    """
    length_trial, stimulus_start, stimulus_stop, num_trials, length_stimulus = one_trial_details(trials_table)
    
    baseline = (length_trial/2 - length_stimulus/2) * 1000
    length_stimulus_ms = length_stimulus * 1000
    
    plt.xlabel('Time (ms)')
    plt.ylabel('Trial Number')
    plt.xlim(-baseline - int(.01*baseline), baseline + int(.01*baseline))
    plt.title('Trial info unit {}'.format(unit_id))
    plt.vlines([0, length_stimulus_ms], ymin = 0, ymax = num_trials, color = 'r', zorder = 10)
    
    for i in np.arange(len(trials_info)):
        as_an_array = (np.array(trials_info[i])*1000) - baseline
        plt.plot(as_an_array, np.repeat(i, len(trials_info[i])), '|', color = 'k', alpha = .4)
        
        
        
def plot_raster(sorting_extractor, unit_id, trials_table):
    """
    uses get trials to get the trials for a single unit, and creates a raster plot of each trial 

    Parameters
    ----------
    sorting_extractor : TYPE
        DESCRIPTION.
    unit_id : TYPE
        DESCRIPTION.
    trials_table : TYPE
        DESCRIPTION.

    Returns
    -------
    None.

    """
    array_needed = get_trials_to_plot(sorting_extractor, unit_id, trials_table)
    per_trial_raster_plot(array_needed, unit_id, trials_table)
    


def plot_distribution(sorting_extractor, unit_id, trials_table, binsize_ms, plot_type):
    
    length_trial, stimulus_start, stimulus_stop, num_trials, length_stimulus = one_trial_details(trials_table)
    baseline = (length_trial - length_stimulus)/2
    
    trials = get_trials_to_plot(sorting_extractor, unit_id, trials_table)
    all_trials = get_all_trial_info(trials)
    
    adjusted = (np.array(all_trials) - baseline)*1000
    
    if plot_type == 'histogram':
        fig = sns.histplot(adjusted, stat = 'count', binwidth = binsize_ms, color = 'k')
    
    elif plot_type == 'smooth':
        fig = sns.kdeplot(adjusted, bw_adjust = binsize_ms/25, color = 'k')
        
    plt.title('Distribution of Spikes over Trials: Unit {}'.format(unit_id))
    plt.vlines([0, length_stimulus*1000], ymin = 0, ymax = max(fig.get_yticks()), color = 'r', zorder = 10)
    plt.xlabel('Time (ms)')
    plt.xlim((-baseline*1000) - 2, (baseline*1000) + 2)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    